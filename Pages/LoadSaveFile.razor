@page "/"
@*@inject IJSRuntime JSRuntime;*@
@inject HttpClient Http
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager

<h1>Greetings, friend!</h1>
<p>To begin, upload your save file below. The name will be something like 'NGUSave-Build-1001-November-15-20-03.txt' and can usually be found in your Downloads folder.</p>
<p>Some browsers don't add a proper file extension to the save, but it'll still work fine here without it.</p>

<div class="drag-drop-zone">
    <InputFile OnChange="HandleFileSelected" />
    @status
</div>

@code {
    [CascadingParameter] MainLayout mainlayout { get; set; }
    [CascadingParameter] PlayerData playerdata { get; set; }

    const string DefaultStatus = "Drop a text file here to view it, or click to choose a file";
    const int MaxFileSize = 1 * 1024 * 1024; // 1MB
    string status = DefaultStatus;

    async Task HandleFileSelected(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();
        if (file == null)
        {
            return;
        }
        else if (file.Size > MaxFileSize)
        {
            status = $"That's too big. Max size: {MaxFileSize} bytes.";
        }
        else
        {
            status = "Loading...";

            using (var reader = new StreamReader(file.Data))
            {
                string fileRawContents = await reader.ReadToEndAsync();
                mainlayout.SetPlayerData(DecodeToJSON(fileRawContents));
            }

            status = DefaultStatus;
            RedirectToOverview();
        }
    }

    private static T DeserializeBase64<T>(string base64Data)
    {
        byte[] bytes = Convert.FromBase64String(base64Data);
        BinaryFormatter formatter = new BinaryFormatter();
        formatter.Binder = new CustomBinder();

        using (MemoryStream memoryStream = new MemoryStream(bytes))
        {
            Console.WriteLine("About to return deserialised value");
            return (T)formatter.Deserialize(memoryStream);
        }
    }

    private static string GetChecksum(string data)
    {
        MD5CryptoServiceProvider md5 = new MD5CryptoServiceProvider();

        return Convert.ToBase64String(md5.ComputeHash(Convert.FromBase64String(data)));
    }

    public PlayerData DecodeToJSON(string contents)
    {

        SaveData saveData = DeserializeBase64<SaveData>(contents);

        string checksum = GetChecksum(saveData.playerData);
        if (saveData.checksum != checksum)
        {
            throw new Exception("checksum mismatch");
        }

        return DeserializeBase64<PlayerData>(saveData.playerData);
    }

    sealed class CustomBinder : SerializationBinder
    {
    public override Type BindToType(string assemblyName, string typeName)
    {
    Type typeToDeserialize = null;

    // Force assembly name so we can use 'wrong' assembly in BinaryFormatter
    assemblyName = assemblyName.Replace("1.0.0.0", "0.0.0.0");
    assemblyName = assemblyName.Replace("Assembly-CSharp", "NGUSaveAnalyser");

    // The following line of code returns the type.
    typeToDeserialize = Type.GetType(String.Format("{0}, {1}",
    typeName, assemblyName));

    return typeToDeserialize;
    }
    }

    void RedirectToOverview()
    {
    NavigationManager.NavigateTo("/overview");
    }

    protected async override void OnInitialized()
    {
    var bytes = await Http.GetByteArrayAsync("/Assembly-CSharp.dll");
    var assembly = System.Reflection.Assembly.Load(bytes);
    //await JSRuntime.InvokeVoidAsync("initialiseStatExtractor");
    }
    }
