@page "/"
@inject HttpClient Http
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager

<div class="load-save-file container">
    <h1 class="display-4">NGU Save Analyser</h1>

    <h1>Intro</h1>

    <p>This tool was created to allow you to easily see various stats and get insights into your current progress in NGU IDLE. The stats are currently quite basic but eventually you'll be able to see most things that can be calculated from your save file.</p>
    <p><strong>Note:</strong> the tool can only calculate information from a single save file, which is a snapshot in time, therefore it can't do anything that involves comparisons against earlier saves.</p>
    <p>If you have any ideas for items that could be displayed, please provide feedback via the link in the top right corner.</p>

    <h1>Instructions</h1>
    <p>To get started, use one of the following methods to load your save file:</p>
    <ul>
        <li>drag your save file onto the box below</li>
        <li>click and search for your save file</li>
    </ul>
    <p>If you want to load a different save, just come back to this page and repeat the same steps.</p>
    <p><strong>Note:</strong> the file name will look something like 'NGUSave-Build-1002-November-15-20-03.txt'. The file extension (.txt) might be missing but the save file will still load.</p>

    <div class="drag-drop-zone">
        <InputFile OnChange="HandleFileSelected" />
        @status
    </div>
</div>

@code {
    [CascadingParameter] MainLayout mainlayout { get; set; }
    [CascadingParameter] PlayerData playerdata { get; set; }

    const string DefaultStatus = "Drop a text file here to view it, or click to choose a file";
    const int MaxFileSize = 1 * 1024 * 1024; // 1MB
    string status = DefaultStatus;

    async Task HandleFileSelected(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();
        if (file == null)
        {
            return;
        }
        else if (file.Size > MaxFileSize)
        {
            status = $"That's too big. Max size: {MaxFileSize} bytes.";
        }
        else
        {
            status = "Loading...";

            using (var reader = new StreamReader(file.Data))
            {
                string fileRawContents = await reader.ReadToEndAsync();
                mainlayout.SetPlayerData(DecodeToJSON(fileRawContents));
            }

            status = DefaultStatus;
            NavigationManager.NavigateTo("/summary");
        }
    }

    private static T DeserializeBase64<T>(string base64Data)
    {
        byte[] bytes = Convert.FromBase64String(base64Data);
        BinaryFormatter formatter = new BinaryFormatter();
        formatter.Binder = new CustomBinder();

        using (MemoryStream memoryStream = new MemoryStream(bytes))
        {
            return (T)formatter.Deserialize(memoryStream);
        }
    }

    private static string GetChecksum(string data)
    {
        MD5CryptoServiceProvider md5 = new MD5CryptoServiceProvider();

        return Convert.ToBase64String(md5.ComputeHash(Convert.FromBase64String(data)));
    }

    public PlayerData DecodeToJSON(string contents)
    {

        SaveData saveData = DeserializeBase64<SaveData>(contents);

        string checksum = GetChecksum(saveData.playerData);
        if (saveData.checksum != checksum)
        {
            throw new Exception("checksum mismatch");
        }

        return DeserializeBase64<PlayerData>(saveData.playerData);
    }

    sealed class CustomBinder : SerializationBinder
    {
        public override Type BindToType(string assemblyName, string typeName)
        {
            // Force assembly name so we can use 'wrong' assembly in BinaryFormatter
            assemblyName = assemblyName.Replace("1.0.0.0", "0.0.0.0");
            assemblyName = assemblyName.Replace("Assembly-CSharp", "NGUSaveAnalyser");

            // The following line of code returns the type.
            Type typeToDeserialize = Type.GetType(String.Format("{0}, {1}", typeName, assemblyName));

            return typeToDeserialize;
        }
    }

    protected async override void OnInitialized()
    {
        var bytes = await Http.GetByteArrayAsync("/Assembly-CSharp.dll");
        var assembly = System.Reflection.Assembly.Load(bytes);
        //await JSRuntime.InvokeVoidAsync("initialiseStatExtractor");
    }
}
